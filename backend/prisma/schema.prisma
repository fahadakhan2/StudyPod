generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  firebaseId    String          @unique // Firebase UID
  email         String? // Optional email
  interests     String[]        @default([]) // Array of user interests
  playlistItems UserAudioFile[] // Audio saved to user's playlist
  Audios     String[]        @default([])
}

model AudioFile {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  s3Key            String @unique // S3 object key (e.g., uploads/audio-uuid.mp3)
  originalName     String? // Optional: original file name
  contentType      String // MIME type (e.g., audio/mpeg)
  url              String // Public or signed URL to the file
  uploadDate       DateTime           @default(now()) // Upload timestamp
  summary          PodcastSummary?    @relation("AudioToSummary") // 1:1 relation back to summary
  savedBy          UserAudioFile[] // All users who have saved this audio
}

model PodcastSummary {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  title    String // Summary title
  content  String // The podcast audio script
  summary  String // The podcast summary
  keywords String[] // Keywords for lookup/matching
  audio    AudioFile? @relation("AudioToSummary", fields: [audioId], references: [id])
  audioId  String?    @unique @db.ObjectId // Unique 1:1 link to AudioFile
}

model UserAudioFile {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  audioId   String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  audioFile AudioFile @relation(fields: [audioId], references: [id])
  addedAt   DateTime  @default(now()) // When user saved the audio
}